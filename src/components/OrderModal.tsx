
import React, { useState } from 'react';
import { Dialog, DialogContent, DialogTitle, DialogDescription } from "@/components/ui/dialog";
import { toast } from "@/hooks/use-toast";
import OrderForm from "./order/OrderForm";
import OrderSuccess from "./order/OrderSuccess";
import { FormValues, Product } from "./order/OrderFormSchema";

interface OrderModalProps {
  isOpen: boolean;
  onClose: () => void;
  product: Product;
}

const OrderModal: React.FC<OrderModalProps> = ({ isOpen, onClose, product }) => {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [formSuccess, setFormSuccess] = useState(false);
  
  const handleSubmit = async (values: FormValues) => {
    setIsSubmitting(true);
    
    try {
      // Convert weight from string to number for calculations
      const weightNum = parseFloat(values.weight);
      const skewers = weightNum * 5;
      const people = weightNum * 4;
      
      // Format message for Telegram
      const message = `
üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:
–ü—Ä–æ–¥—É–∫—Ç: ${product.name}
–ò–º—è: ${values.name}
–¢–µ–ª–µ—Ñ–æ–Ω: ${values.phone}
–ö–æ–ª-–≤–æ: ${values.weight} –∫–≥ (‚âà ${skewers} —à–∞–º–ø—É—Ä–æ–≤, –Ω–∞ ${people} —á–µ–ª.)
–ì–æ—Ä–æ–¥: ${values.city}
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏: ${values.extras.grill ? '‚úÖ –ú–∞–Ω–≥–∞–ª' : '‚ùå –ú–∞–Ω–≥–∞–ª'}, ${values.extras.charcoal ? '‚úÖ –£–≥–æ–ª—å' : '‚ùå –£–≥–æ–ª—å'}
      `;
      
      // In a real application, you would send this to your Telegram webhook
      console.log("Sending to Telegram:", message);
      
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Show success message
      setFormSuccess(true);
      toast({
        title: "‚úÖ –°–ø–∞—Å–∏–±–æ!",
        description: "–ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.",
      });
      
      // Close modal after a delay
      setTimeout(() => {
        onClose();
        setFormSuccess(false);
      }, 2000);
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-md">
        <DialogTitle className="text-xl font-bold text-suretRed">
          –ó–∞–∫–∞–∑–∞—Ç—å: {product.name}
        </DialogTitle>
        <DialogDescription>
          –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É, –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞.
        </DialogDescription>
        
        {formSuccess ? (
          <OrderSuccess />
        ) : (
          <OrderForm 
            product={product}
            onSubmit={handleSubmit}
            isSubmitting={isSubmitting}
          />
        )}
      </DialogContent>
    </Dialog>
  );
};

export default OrderModal;
